/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.example.plugin

import com.android.build.gradle.AppExtension
import com.android.build.gradle.AppPlugin
import com.example.plugin.transform.StudyTransform
import org.gradle.api.Project
import org.gradle.api.Plugin

/**
 * A simple 'hello world' plugin.
 */
@Suppress("unused")
class PlugindemoPlugin: Plugin<Project> {
    override fun apply(project: Project) {
        project.logger.lifecycle("start apply Plugindemo ...")
        // Register a task
        project.tasks.register("PlugindemoGreeting") { task ->
            task.doLast {
                project.logger.lifecycle( "hello from plugin demo greeting")
            }
        }
        project.logger.lifecycle("extensions: ${project.extensions}")
//        if (project.plugins.hasPlugin(AppPlugin::class.java) ) {
//            project.logger.lifecycle("project is app and now prepare for register transform")

            val extObj = project.extensions.getByName("android");
            project.logger.lifecycle("extObj: $extObj, class: ${extObj::class.java}")

            project.logger.lifecycle("start get AppExtension object ...")
            val appExt = project.extensions.getByType(AppExtension::class.java)
            project.logger.lifecycle("appExt: $appExt, class: ${appExt::class.java}")
            appExt.registerTransform(StudyTransform(project.logger))
//        } else {
//            project.logger.error("project is not app")
//        }

//        val appExt = project.extensions.getByName("android")
//        project.logger.lifecycle("android extension: $appExt, class: ${appExt::class.java}")
//        (appExt as? AppExtension)?.apply {
//            project.logger.lifecycle("now going to register transform")
//            registerTransform(StudyTransform(project.logger))
//        } ?: project.logger.lifecycle("not the app extension class")
    }
}
